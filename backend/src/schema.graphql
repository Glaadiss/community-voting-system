type Query {
  contests: [Contest!]!
  contest(contestId: ID!): Contest
  users: [User!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload
  createOperator(data: CreateOperatorInput): AuthPayload
  createAdmin(data: CreateAdminInput): AuthPayload
  createContest(name: String!): Contest
  addProjectsToContest(contestId: ID!, projectName: String!): Contest
  login(data: LoginUserInput!): AuthPayload
}

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  postalCode: String!
  pesel: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateOperatorInput {
  email: String!
  password: String!
  name: String!
}

input CreateAdminInput {
  email: String!
  password: String!
}

type AuthPayload {
  user: User!
  token: String!
}

type User {
  id: ID!
  email: String!
  role: RoleType!
  name: String!
  postalCode: String!
  pesel: String!
  passwordHash: String!
}

type Contest {
  id: ID!
  name: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  name: String!
  contests: [Contest!]!
}

enum RoleType {
    user
    operator
    admin
}
