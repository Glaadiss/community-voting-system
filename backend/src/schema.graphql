# import ProjectOrderByInput, UserOrderByInput, ContestOrderByInput from './generated/prisma.graphql'

type Query {
  contests(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: ContestOrderByInput
  ): [Contest!]!
  contest(id: ID!): Contest!
  projects(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: ProjectOrderByInput
  ): [Project!]!
  project(id: ID!): Project!
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  user(id: ID!): UserOutput!
  contestVotes(id: ID): [VotesCount]!
  projectWhichUserVotesInContest(id: ID): ID
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(
    data: UpdateUserInput!
    where: AccountWhereUniqueInput!
  ): UserOutput!
  createOperator(data: CreateOperatorInput!): AuthPayload!
  updateOperator(
    data: UpdateOperatorInput!
    where: AccountWhereUniqueInput!
  ): OperatorOutput!
  createAdmin(data: CreateAdminInput!): AuthPayload!
  updateAdmin(
    data: UpdateAdminInput!
    where: AccountWhereUniqueInput!
  ): AdminOutput!
  createContest(data: CreateContestInput!): Contest!
  updateContest(data: CreateContestInput!, where: ID): Contest!
  createProject(data: CreateProjectInput!): Project!
  updateProject(data: CreateProjectInput!, where: ID): Project!
  addProjectsToContest(contestId: ID!, projectName: String!): Contest
  login(data: LoginUserInput!): AuthPayload!
  vote(data: VoteInput): Vote!
  removeVote(data: VoteInput): Long
}

scalar DateTime

input VoteInput {
  contestId: ID!
  projectId: ID!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  postalCode: String
  pesel: String
}

input UpdateUserInput {
  email: String
  password: String
  name: String
  postalCode: String
  pesel: String
}

input UpdateOperatorInput {
  email: String
  password: String
  name: String
}

input UpdateAdminInput {
  email: String
  password: String
}

input AccountWhereUniqueInput {
  id: ID
  email: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateOperatorInput {
  email: String!
  password: String!
  name: String!
}

input CreateAdminInput {
  email: String!
  password: String!
}

type VotesCount {
  projectId: ID!
  count: Int!
}

type AuthPayload {
  user: UserOutput!
  token: String!
}

input CreateProjectInput {
  title: String!
  description: String
  image: String
  contest: ID
  isPublished: Boolean!
}

input CreateContestInput {
  title: String!
  image: String
  description: String
  projects: [ID!]
  startDate: DateTime
  endDate: DateTime
  isPublished: Boolean!
}

type UserOutput {
  id: ID!
  email: String!
  role: RoleType!
  name: String!
  postalCode: String!
  pesel: String!
}

type OperatorOutput {
  id: ID!
  email: String!
  role: RoleType!
  name: String!
}

type AdminOutput {
  id: ID!
  email: String!
  role: RoleType!
}

type User {
  id: ID!
  email: String!
  role: RoleType!
  name: String
  postalCode: String
  pesel: String
  passwordHash: String!
}

type Contest {
  id: ID!
  title: String!
  image: String
  description: String
  projects: [Project!]
  votes: [Vote!]
  startDate: DateTime
  endDate: DateTime
  isPublished: Boolean!
}

type Vote {
  id: ID!
  user: User!
  project: Project!
  contest: Contest!
}

type Project {
  id: ID!
  title: String!
  description: String
  image: String
  contests: [Contest!]
  votes: [Vote!]
  isPublished: Boolean!
}

enum RoleType {
  user
  operator
  admin
}
