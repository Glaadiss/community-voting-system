# import ProjectOrderByInput, UserOrderByInput from './generated/prisma.graphql'

type Query {
  contests(query: String, first: Int, skip: Int, after: String, orderBy: ProjectOrderByInput): [Contest!]!
  contest(id: ID!): Contest!
  projects(query: String, first: Int, skip: Int, after: String, orderBy: ProjectOrderByInput): [Project!]!
  project(id: ID!): Project!
  users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  createOperator(data: CreateOperatorInput!): AuthPayload!
  createAdmin(data: CreateAdminInput!): AuthPayload!
  createContest(data: CreateContestInput!): Contest!
  createProject(data: CreateProjectInput!): Project!
  addProjectsToContest(contestId: ID!, projectName: String!): Contest
  login(data: LoginUserInput!): AuthPayload!
}

scalar DateTime

input CreateUserInput {
  email: String!
  password: String!
  name: String!
  postalCode: String!
  pesel: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateOperatorInput {
  email: String!
  password: String!
  name: String!
}

input CreateAdminInput {
  email: String!
  password: String!
}

type AuthPayload {
  user: UserSimplified!
  token: String!
}

input CreateProjectInput {
  title: String!
  description: String
  image: String
  contest: ID
  isPublished: Boolean!
}

input CreateContestInput {
  title: String!
  image: String
  description: String
  projects: [ID!]
  startDate: DateTime
  endDate: DateTime
  isPublished: Boolean!
}

type UserSimplified {
  id: ID!
  email: String!
  role: RoleType!
  name: String!
  postalCode: String!
  pesel: String!
}

type User {
  id: ID!
  email: String!
  role: RoleType!
  name: String!
  postalCode: String!
  pesel: String!
  passwordHash: String!
}

type Contest {
  id: ID!
  title: String!
  image: String
  description: String
  projects: [Project!]
  votes: [Vote!]
  startDate: DateTime
  endDate: DateTime
  isPublished: Boolean!
}

type Vote {
  id: ID!
  user: User!
  project: Project!
  contest: Contest!
}

type Project {
  id: ID!
  title: String!
  description: String
  image: String
  contests: [Contest!]
  isPublished: Boolean!
}

enum RoleType {
  user
  operator
  admin
}
